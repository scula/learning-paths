node_string_id: "prog_langs_python_functions"
name: "Functions"
description: "Functions: Building blocks of Python"
software_dependencies:
  - name: python
    version: 3.11.4
content:
  - type: "paragraph"
    value: |
      # Learning Objectives

      In this lesson, you will learn about:
      - How to use functions in Python
      - Why do we need functions in Python
      - How to create them and understand their syntax
  - type: "paragraph"
    card_group: "functions"
    value: |
      # Functions in Python

      Up until now we've been writing code in a linear fashion. This means that we write one line of code, 
      then the next, and so on. But what if we want to reuse some code? Or what if we want to write a
      piece of code that we can use multiple times? 

      For example, we want to write a program that calculates the area of a rectangle. We can write the
      code to calculate the area once, but what if we want to calculate the area of multiple rectangles?
      Let's implement it without functions first:
  - type: "codeblock-exec"
    card_group: "functions"
    value: |
      length1, width1 = 5, 3
      length2, width2 = 10, 2
      length3, width3 = 4, 4
      print(length1 * width1)
      print(length2 * width2)
      print(length3 * width3)
  - type: "paragraph"
    card_group: "functions"
    value: |
      As you can see, we have to write the same code multiple times. This is not very efficient. 
      We can use functions to solve this problem. Functions are a way to organize and reuse code.

  - type: "paragraph"
    card_group: "basics"
    value: |
      # Understanding Functions
      Imagine you're a chef üç≥ in a kitchen. Each recipe is like a function - it tells you what 
      ingredients you need and the steps to make a dish. In Python, a function works similarly. 
      You give it some inputs (like ingredients), it does some magic (the recipe steps), and 
      voil√†, you get an output (a delicious dish)!

      Let's modify our previous example to use a function instead.
  - type: "codeblock-exec"
    card_group: "basics"
    value: |
      def calculate_area(length, width):
          return length * width
          
      print(calculate_area(5, 3))
      print(calculate_area(10, 2))
      print(calculate_area(4, 4))
  - type: "paragraph"
    card_group: "basics"
    value: |
      Here, we've defined a function called "calculate_area".  This is much more efficient 
      than writing the same code multiple times because if the formula should be adapted or the code
      should be changed, we only have to do it once.

  - type: "paragraph"
    value: |
      # Anatomy of a Function
      Let's take a closer look at the function we just wrote. Let's start with function definition:
      ```
      def calculate_area(length, width):
      ```
      The first line of a function is called the **function definition**. It starts with the keyword `def`,
      followed by the name of the function, and then a pair of parentheses. The parentheses can contain
      one or more **parameters**. Parameters are like variables that are used inside the function. They
      are placeholders for the actual values that will be passed to the function when it is called.


      The body of the function is the code that is executed when the function is called. It is indented
      to indicate that it is part of the function. The body of the function starts with a colon (`:`) and
      can contain one or more statements. The body of the function ends when the indentation ends:
      ```
      def calculate_area(length, width): # this is the function definition
          return length * width # this is the body of the function
      ```

      The last line of the function is the **return statement**. It is used to return a value from the function.
      Returning a value means that a place in the code where the function is called will be replaced by the
      value that is returned by the function. For example:
      ```
      result = calculate_area(5, 3)
      ```
      Here, the variable `result` will be assigned the value that is returned by the function `calculate_area`.
      In this case, the value is `15`. It will happen during the execution of the program, so the variable `result`
      will contain the value `15` after the function is called.

  - type: "paragraph"
    card_group: "calling"
    value: |
      # Calling a Function
      To call a function, we use the function name followed by a pair of parentheses. The parentheses can contain
      one or more **arguments**. Arguments are the actual values that are passed to the function when it is called.
      For example:
      ```
      calculate_area(5, 3)
      ```
      Here, we are calling the function `calculate_area` with the arguments `5` and `3`. The function will be executed
      and the value that is returned by the function will be used in place of the function call. For example:
      ```
      print(calculate_area(5, 3))
      ```
      Here, the function `calculate_area` is called with the arguments `5` and `3`. The function will be executed and
      the value that is returned by the function will be printed to the console.
  - type: "hint"
    card_group: "calling"
    value: |
      Arguments vs Parameters. Arguments are the objects we pass to a function when we call it. 
      Parameters are the variables that receive these objects inside the function. Parameters 
      allow functions to hide the details of how they work. This is called **abstraction**.

  - type: "paragraph"
    card_group: "arguments"
    value: |
      # Advancing with Arguments and Parameters
      In functions, **arguments** are the values you pass, and **parameters** are the variables that 
      receive these values. It's like when someone gives you a gift üéÅ (argument), and you take it 
      in your hands (parameter). You can then do whatever you want with the gift. You can open it,
      throw it away, or even give it to someone else. The same goes for parameters. You can use them
      in your function however you want.

      ```
      ## We use def keyword to define a function
      def calc_sum(a, b): # a and b are parameters available only inside the function
          c = a + b # all variables declared inside the function are available only inside the function
          return c

      ## We call the function by its name and pass the arguments
      num1 = 5
      num2 = 3
      calc_sum(num1, num2) # inside the brackets we pass our variables as arguments to the function 
      ```

      We can think of function definition as a contract. It tells us what the function expects to receive
      and what it will do with it. Once the function is called, it will execute the code inside the function
      body with the values that are passed to it. After the function is executed, it will return a value that
      can be used in place of the function call.
  - type: "codeblock-exec"
    card_group: "arguments"
    language: "python"
    value: |
      def distance(speed, time):
          return speed * time

      bike_speed = 30 # km/h
      car_speed = 60 # km/h

      race_time = 2 # hours

      bike_result = distance(bike_speed, race_time)
      car_result = distance(car_speed, race_time)

      print("The bike traveled ", bike_result, " km")
      print("The car traveled ", car_result, " km")

  - type: "paragraph"
    card_group: "multiple"
    value: |
      ## Multiple Parameters
      Functions can have from zero to many parameters. You can use as many as you need.
      For example:
  - type: "codeblock-exec"
    card_group: "multiple"
    description: "Here's how you can use multiple parameters."
    language: "python"
    value: |
      def multiply(x, y, z):
          return x * y * z
      print(multiply(5, 3, 9))

  - type: "paragraph"
    value: |
      ## Default Values: Making Functions Flexible
      Sometimes, you want to set a default value for a parameter. It's like having a backup plan üõ°Ô∏è. 
      If no specific value is given, the function knows what to do.

  - type: "codeblock-exec"
    description: "This function has a default value for one of its parameters."
    language: "python"
    value: |
      def make_coffee(type="espresso"):
          return f"Making a cup of {type}"
      print(make_coffee())
      print(make_coffee("latte"))

  - type: "kata"
    boilerplate: |
      def calculate_area(length, width):
          # your code here
      print(calculate_area(5, 3))
    task: "Write a function to calculate the area of a rectangle. \nAssign the result of the calculation to the return value of the function.\n"
    solution: |
      def calculate_area(length, width):
          return length * width
      print(calculate_area(5, 3))
    test_code: |
      from main import calculate_area
      import unittest
      class TestAreaCalculation(unittest.TestCase):
          def test_area_calculation(self):
              self.assertEqual(calculate_area(5, 3), 15, "Make sure that you calculate the area correctly.")

  - type: "quiz"
    quiz_items:
      - question: "What is the main purpose of a function in Python?"
        answers:
          - value: "To repeat code multiple times"
          - value: "To organize and reuse code efficiently"
            correct: true
            explanation: "Functions in Python are used to organize and reuse code, making it more efficient and manageable."
          - value: "To display output on the screen"
      - question: "Which of the following is true about default parameters?"
        answers:
          - value: "They must be specified every time a function is called"
          - value: "They are optional and have a predefined value if not given"
            correct: true
            explanation: "Default parameters in functions have a predefined value and are optional when calling the function."
          - value: "They cannot be used in Python functions"
