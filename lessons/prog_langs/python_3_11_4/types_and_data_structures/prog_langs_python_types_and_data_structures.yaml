node_string_id: "prog_langs_python_types_and_data_structures"
name: "Types and Data Structures"
description: "Types, variables and structures"
software_dependencies:
  - name: python
    version: 3.11.4
content:
  - type: "paragraph"
    value: |
      # Learning Objectives

      In this lesson, we will talk again and learn more about Python objects, their types and how to work with them.
      You will learn to differentiate between different types and determine the type of an object.

  - type: "paragraph"
    card_group: "object_types"
    value: |
      # Python Objects and Types

      Before we discussed that working with data is the main purpose of programming.
      And data is represented by objects of different **types** in Python. 

      Type of an object defines what operations can be performed on it and what values it can hold.
      For example, an operator '+' does different things for numbers and strings. Try to run the next 
      example and notice the difference in the output.

  - type: "codeblock-exec"
    card_group: "object_types"
    value: |
      numberSum = 1 + 2
      stringSum = "1" + "2"
      print(numberSum)
      print(stringSum)
  - type: "paragraph"
    card_group: "object_types"
    value: |
      The same operator "+" does different things for numbers and strings.
      For numbers it performs addition, for strings it performs concatenation.


      This behavior is defined by the type of the object we are working with and that's why 
      it's important to understand the types and their capabilities.

  - type: "paragraph"
    value: |
      # Main Python types

      Python has a wide range of types for different purposes. Later you will even learn how to create your own types.
      But for now let's have a thousand feet overview of the main types in Python.

      🔢 **Numeric types**

      Numeric types are used to represent numbers in Python (560, 3.14, 1 + 5j, etc.).

      🔡 **String type**

      String type is used to represent text in Python and is always enclosed in quotes ('Hello', "World", etc.).

      📦 **Container types**

      Container types are used to store multiple values in a single object. For example, a list of numbers 
      would be a container type. There are many different container types in Python and we will talk about them later.

      🚫 **None type**

      None type is used to represent the absence of a value. It is used to indicate that a variable exists,
      but it doesn't have a value yet. The value of None type is always `None` without quotes.

      🚦 **Boolean type**

      Boolean type is used to represent logical values `True` and `False`. It is used to indicate the result of
      a comparison or a logical operation. For example, `1 > 2` will create a boolean value `False` because `1` is not
      greater than `2`.

      That's quite a lot of types, but don't worry, we will talk about them in more detail later. 
      Now let's see how Python determines the type of an object and how we can determine it ourselves.

  - type: "paragraph"
    card_group: "dynamic_typing"
    value: |
      # Dynamic Typing

      The smart thing about Python is that we don't need to specify the type of an object.
      Python will automatically determine the type of an object based on the value we assign to it.
      This is called **dynamic typing**.


      For example, in the following code:
      ```
      a = 132
      b = "132"
      c = True 
      d = 1.32
      e = [1, 3, 2]
      ```
      Python will automatically determine the type of each variable based on the value we assign to it.
      In this case, `a` will be an integer, `b` will be a string, `c` will be a boolean, `d` will be a float,
      and `e` will be a list.

      ## Determining the type of an object

      And to check the type of an object we can use the function `type()` which will return the type of an object.
  - type: "codeblock-exec"
    card_group: "dynamic_typing"
    value: |
      a = 132
      b = "132"
      c = True 
      d = 1.32
      e = [1, 3, 2]
      print(type(a))
      print(type(b))
      print(type(c))
      print(type(d))
      print(type(e))
  - type: "paragraph"
    card_group: "dynamic_typing"
    value: |
      You will not see the name of the type as we defined it above, but you will see the internal 
      name of the type. For example, the type of `a` will be `int` and the type of `b` will be `str`, etc.

  - type: "paragraph"
    card_group: "reassigning_variables"
    value: |
      # Reassigning variables

      Variables are used to store values in Python. And we can assign any value to a variable. But Python
      also allows us to reassign variables to different types or values. 
      This means that we can assign a value of one type to a variable and later 
      reassign it to a value of a different type.

      What value do you think the variable `a` will have after the following code is executed?
  - type: "codeblock-exec"
    card_group: "reassigning_variables"
    value: |
      a = 1
      a = "Hello"
      print(a)
  - type: "quiz"
    card_group: "reassigning_variables"
    quiz_items:
      - question: "Value of the variable `a` is"
        answers:
          - value: "1"
            explanation: "The variable `a` did have the value '1' but after the second assignment it was reassigned to a string value."
          - value: "Hello"
            correct: true
            explanation: "The variable `a` is reassigned to a string value."
          - value: "None"
            explanation: "This is a correct assignment and we wouldn't get None value here."
          - value: "Error"
            explanation: "This is a correct assignment and we wouldn't get an error here."

  - type: "paragraph"
    value: |
      # Operators and operands

      We talked about objects, values and types. But just by themselves they are not very useful.
      They just sit there and do nothing. Usually we want to do something with them to get the result we need.

      In programming, we use **operators** to perform operations on objects and **operands** are the 
      objects that operators work on. For example, in expression `1 + 2` the operator is '+' and 
      operands are '1' and '2'.

      Python supports a wide range of operators for different types of objects. But sometimes the same 
      operator can do different things for different types of objects. For example, '+' operator can
      perform addition for numbers and concatenation for strings. 

      Let's take a look at some of the operators we can use in Python.

  - type: "paragraph"
    card_group: "operators"
    value: |
      ## ♾️ **Mathematical operators**

      Mathematical operators are used to perform mathematical operations on numbers. They look very similar 
      to the operators we use in math with some differences:
      * '+' addition
      * '-' subtraction
      * '*' multiplication
      * '/' division
      * '//' floor division (11 // 2 = 5)
      * '%' modulus (11 % 2 = 1)
      * '**' exponentiation (2 ** 3 = 8)

      Which covers most of the operations we need to perform on numbers. Python also has some nice perks 
      built-in like the ability to work with extremely large numbers. Try to run the next code and see the result.
  - type: "codeblock-exec"
    card_group: "operators"
    value: |
      print(999**999)
  - type: "paragraph"
    card_group: "operators"
    value: |
      The interesting thing about it, that most of the languages don't support this feature out of the box and would 
      require painful workarounds to achieve the same result.

  - type: "paragraph"
    card_group: "operators_comparison"
    value: |
      ## ⚖️ **Comparison operators**

      Comparison operators are used to compare two values. They return a boolean value `True` or `False` depending on
      the result of the comparison. For example, `1 > 2` will return `False` because `1` is not greater than `2`.
      Here is the list of comparison operators:
      * `>` greater than
      * `<` less than
      * `>=` greater than or equal to
      * `<=` less than or equal to
      * `==` equal to
      * `!=` not equal to

      The result of the comparison is always a boolean value `True` or `False`. Let's take a look at the example:
  - type: "codeblock-exec"
    card_group: "operators_comparison"
    value: |
      res = 45 != 39 
      print("45 != 39 is", res)
  - type: "quiz"
    card_group: "operators_comparison"
    quiz_items:
      - question: "What is the value of the variable `res`?"
        answers:
          - value: "It's a boolean value 'True'"
            correct: true
            explanation: "Because 45 is not equal to 39."

  - type: "paragraph"
    card_group: "logical_operators"
    value: |
      ## 🚦 **Logical operators**

      Logical operators are used to combine multiple boolean values into a single boolean value. 
      They are used to perform logical operations on boolean values. For example, `True and False` will return `False`
      because `and` operator requires both operands to be `True` to return `True`. Here is the list of logical operators:
      * `and` logical and
      * `or` logical or
      * `not` logical not

      Let's take a look at the example where we will use variable name for storing some fact and
      value of the variable will be either `True` or `False`.
  - type: "codeblock-exec"
    card_group: "logical_operators"
    value: |
      treesCanWalk = False
      sunIsHot = True
      combinationOfFacts = treesCanWalk and sunIsHot
      print("Combination of facts is", combinationOfFacts)
  - type: "quiz"
    card_group: "logical_operators"
    quiz_items:
      - question: "What is the value of the variable `combinationOfFacts`?"
        answers:
          - value: "It's a boolean value 'False'"
            correct: true
            explanation: "Because one of the operands is `False` and logical AND requires both operands to be `True` to return `True`."
  - type: "paragraph"
    card_group: "logical_operators"
    value: |
      Usually we don't use logical operators and variables names like that. We will see later how 
      to use them in a more useful way.

  - type: "paragraph"
    value: |
      # Summary

      In this lesson, we learned about Python objects, their types and how to work with them. 
      The important thing to remember is that Python is a dynamically typed language and 
      we don't need to specify the type of an object when we create it.  And that objects of different types 
      can have different capabilities.
