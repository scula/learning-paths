node_string_id: "prog_langs_python_types_and_data_structures_data_types_lists_and_dictionaries"
name: "Lists and Dictionaries"
description: "Storing many items"
software_dependencies:
  - name: python
    version: 3.11.4
content:
  - type: "paragraph"
    card_group: "introduction"
    value: |
      # Lists and Dictionaries
      Lists and Dictionaries are more than just places to store data; they are the backbone of Python scripting, 
      offering incredible flexibility and power.

  - type: "paragraph"
    card_group: "lists_basics"
    value: |
      ## Understanding Lists in Python
      A list in Python is like a treasure chest that can hold a variety of items. 
      Imagine it as a collection of different things, like books, coins, or even other chests! 
      The beauty of Python lists is their ability to hold different types of data, change size 
      dynamically, and be manipulated with ease.

  - type: "hint"
    card_group: "lists_basics"
    value: |
      **Hint:** Lists are created using square brackets `[]`, and you can access their elements 
      using indexes, just like how you would count items in a treasure chest!

  - type: "codeblock-exec"
    description: "Creating a list and accessing its elements"
    language: "python"
    value: |
      my_list = [5, "Hello", True]
      print(my_list[0])  # Outputs 5
      print(my_list[1])  # Outputs 'Hello'

  - type: "paragraph"
    card_group: "dictionaries_basics"
    value: |
      ## Exploring Python Dictionaries
      Dictionaries in Python are like secret maps that lead to hidden treasures. 
      They hold information in pairs - a key and a value. Just like a real dictionary, 
      where you look up a word (key) to find its definition (value), Python dictionaries allow you to store and 
      retrieve data efficiently.

  - type: "hint"
    card_group: "dictionaries_basics"
    value: |
      **Hint:** Dictionaries are created with curly braces `{}` with each item being a key-value pair 
      separated by a colon. Remember, keys are unique in a dictionary!

  - type: "codeblock-exec"
    description: "Creating a dictionary and accessing its values"
    language: "python"
    value: |
      my_dict = {"name": "Alice", "age": 30}
      print(my_dict["name"])  # Outputs 'Alice'
      print(my_dict["age"])   # Outputs 30

  - type: "kata"
    boilerplate: |
      shopping_list = []
      # your code here to add items
    task: "Add three items to the `shopping_list` list. For example, 'apples', 'bananas', and 'oranges'.\n"
    solution: |
      shopping_list = []
      shopping_list.append('apples')
      shopping_list.append('bananas')
      shopping_list.append('oranges')
    test_code: |
      from main import shopping_list
      import unittest
      class TestShoppingList(unittest.TestCase):
          def test_list_contents(self):
              self.assertEqual(len(shopping_list), 3, "Ensure you add exactly three items.")
              self.assertIn('apples', shopping_list, "Make sure 'apples' is in the list.")
              self.assertIn('bananas', shopping_list, "Ensure 'bananas' is in the list.")
              self.assertIn('oranges', shopping_list, "Check that 'oranges' are in the list.")

  - type: "quiz"
    quiz_items:
      - question: "Which of the following is a valid list in Python?"
        answers:
          - value: "[1, 2, 'three', 4]"
            correct: true
            explanation: "Python lists can contain different types of elements."
          - value: "(1, 2, 3)"
            explanation: "This is a tuple, not a list."
          - value: "{1: 'one', 2: 'two'}"
            explanation: "This is a dictionary, not a list."
      - question: "How do you access the value associated with the key 'color' in a dictionary `my_dict`?"
        answers:
          - value: "my_dict['color']"
            correct: true
            explanation: "This is the correct syntax for accessing dictionary values."
          - value: "my_dict[0]"
            explanation: "Dictionaries are accessed by keys, not numeric indices."
          - value: "my_dict.color"
            explanation: "This syntax is not used for accessing dictionary elements in Python."
