node_string_id: "prog_langs_python_types_and_data_structures_built_in_numbers"
name: "Numbers"
description: "Arithmetics and numbers in Python"
software_dependencies:
  - name: python
    version: 3.11.4
content:
  - type: "paragraph"
    value: |
      # Learning Objectives

      In this lesson, we will learn about how to perform calculations in Python and how to work with numbers.

  - type: "paragraph"
    card_group: numeric_types
    value: |
      # Numeric types in Python

      Numbers are one of the most common data types in Python. They are used to represent quantities,
      measurements, and other mathematical values. Python makes working with numbers quite easy
      and supports a wide range of numeric types. Ease of use means that we don't have to think 
      about the underlying implementation details and can focus on solving the problem at hand.

      Python primarily supports three types of numbers:

      **Integers** 

      These are whole numbers without a decimal point, like 42 or -3. The internal name for integers is `int`.

      **Floating-Point Numbers** 

      These represent real numbers and contain decimal points, 
      such as 3.14 or -0.001. The internal name for floating-point numbers is `float`.

      **Complex Numbers** 

      Less common but equally important, these numbers have a real and 
      imaginary part, represented as `a + bj`, where `a` and `b` are floats. 
      The internal name for complex numbers is `complex`.

  - type: "hint"
    card_group: numeric_types
    value: |
      The function **type** used below is used to determine the type of an object.
      With it we can check the type of any object in Python.

  - type: "codeblock-exec"
    card_group: numeric_types
    description: "This codeblock demonstrates the creation of different numeric types in Python."
    language: "python"
    value: |
      integer_number = 42
      float_number = 3.14
      complex_number = 1 + 5j
      print(type(integer_number), type(float_number), type(complex_number))

  - type: "paragraph"
    card_group: operations_numeric
    value: |
      # Operations with Numeric Types

      Python supports a wide range of operations with numeric types, enabling us to perform 
      mathematical calculations effortlessly. These operations include:

      **Arithmetic Operations** 

      * Addition ('+')
      * Subtraction ('-')
      * Multiplication ('*')
      * Division ('/')
      * Floor Division ('//')
      * Modulo ('%')
      * Exponentiation ('**')

      **Comparison Operations**

      * Equal to ('==')
      * Not equal to ('!=')
      * Greater than ('>')
      * Less than ('<')
      * Greater than or equal to ('>=')
      * Less than or equal to ('<=')

      **Type Conversion** 

      You can convert between different numeric types using functions like 
      `int()`, `float()`, and `complex()`. We briefly explored artithmetic and comparison operations in the previous lesson. 
      Now, let's take a look at type conversion.

      Type conversion is the process of converting one data type to another. For example, you can convert
      a float to an integer (for example, if you want to display only the whole number part of a float) or 
      you can convert an integer to a string (in fact it happens everytime you print a number).

      Let's take a look at some examples of type conversion in Python.
  - type: "codeblock-exec"
    card_group: operations_numeric
    description: "Demonstrating basic arithmetic operations with integers and floats."
    language: "python"
    value: |
      float_number = 3.14
      integer_number = int(float_number)
      string_number = str(integer_number)
      print(float_number)
      print(integer_number)
      print(string_number)
  - type: "paragraph"
    card_group: operations_numeric
    value: |
      In the example above we converted a float number to an integer and then to a string.

  - type: "paragraph"
    card_group: float_operations
    value: |
      # Working with floats 

      Floats are used to represent real numbers and are written with a decimal point dividing the integer and fractional parts.
      They are one of the most trickiest data types to work with in Python. This is because of the way 
      computers represent real numbers internally. The issue lies with the fact that some fractions are 
      periodic like 1/3 = 0.3333333333333333. It requires an infinite number of digits to represent such numbers. And 
      computers have a limited amount of memory. So, they have to make a trade-off between accuracy and memory usage.

      That's why all floats in Python are stored as approximations. This means that the result of a calculation
      involving floats may not be accurate. Let's take a look at one of the most common examples of this issue.

  - type: "codeblock-exec"
    card_group: float_operations
    description: "Demonstrating the issue with float precision."
    value: |
      print(0.1 + 0.2 == 0.3)
  - type: "quiz"
    card_group: float_operations
    quiz_items:
      - question: "What will be the result of the operation above?"
        answers:
          - value: "True"
            description: "In fact 0.1 + 0.2 in computers gets evaluated to 0.30000000000000004. Which is not equal to 0.3."
          - value: "False"
            correct: true
            description: "In fact 0.1 + 0.2 in computers gets evaluated to 0.30000000000000004. Which is not equal to 0.3."
  - type: "paragraph"
    card_group: float_operations
    value: |
      For people there is no problem calculating the expression above. But for computers it is a different story.
      When comparing floats, you should always use the `math.isclose()` function. It is designed to handle the
      inaccuracies of floats. Let's take a look at an example.
  - type: "codeblock-exec"
    card_group: float_operations
    value: |
      import math
      print(math.isclose(0.1 + 0.2, 0.3))
  - type: "paragraph"
    card_group: float_operations
    value: |
      The `math.isclose()` function returns `True` if the two numbers are close enough. It is a good practice to use it
      when comparing floats. We will talk about modules and math module in particular in the next lessons.

  - type: "kata"
    boilerplate: |
      number1 = 7
      number2 = 3
      result = # your code here
      print(result)
    task: |
      Calculate the product of `number1` and `number2`, and assign it to the variable `result`.

      Product is simply the result of multiplying two numbers. For example, the product of 2 and 3 is 6.

      Don't forget to use the '*' operator and use the correct variable names!
    solution: |
      number1 = 7
      number2 = 3
      result = number1 * number2
    test_code: |
      from main import number1, number2, result
      import unittest
      class TestMultiplication(unittest.TestCase):
          def test_result(self):
              self.assertEqual(result, number1 * number2, "Ensure that the product is calculated correctly.")

  - type: "quiz"
    quiz_items:
      - question: "Which Python numeric type represents whole numbers?"
        answers:
          - value: "int"
            explanation: "The `int` type is used for whole numbers without a decimal point."
            correct: true
          - value: "float"
          - value: "complex"
      - question: "What does the expression `5 // 2` return in Python?"
        answers:
          - value: "2.5"
          - value: "2"
            explanation: "The floor division `//` returns the largest integer less than or equal to the division result."
            correct: true
          - value: "3"
