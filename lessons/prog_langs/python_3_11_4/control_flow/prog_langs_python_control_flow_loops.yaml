node_string_id: "prog_langs_python_control_flow_loops"
name: "Loops"
description: "Repeating things in Python"
software_dependencies:
  - name: python
    version: 3.11.4
content:
  - type: "paragraph"
    value: |
      # Learning Objectives

      In this lesson you will learn how to make things repeat in Python.
      It's an extremely powerful concept that will allow you to create more complex programs. 
      The power comes from the fact that computers can repeat things very quickly, for example
      going over millions of records within a fraction of a second.

  - type: "paragraph"
    value: |
      # Looping Through Python: The Power of Repetition
      We will explore when and how to use loops in Python. Loops are a powerful tool that allow you to repeat
      a certain action multiple times. They are a fundamental concept in programming, and you will use them
      in almost every program you write.

  - type: "paragraph"
    card_group: "loop"
    value: |
      ## The 'for' Loop: The Organized Repeater
       In Python, a `for` loop lets you go through items in a collection one by one. It's great for 
      when you know how many times you want to repeat an action.

      We already worked with lists in Python. They help us organize data in a collection:
      ```
      chocolates = ['dark', 'milk', 'white']
      ```

      We can use a `for` loop to go through each item in the list and print it out

  - type: "codeblock-exec"
    card_group: "loop"
    description: "A basic `for` loop example, iterating over a list."
    language: "python"
    value: |
      chocolates = ['dark', 'milk', 'white']
      for chocolate in chocolates:
          print(f"Tasting {chocolate} chocolate")
  - type: "paragraph"
    card_group: "loop"
    value: |
      The 'for' keyword tells Python that we want to go through each item in the list.
      After this keyword, we have to specify a variable name that will be used to refer to each item in the list.
      In this case, we chose the name `chocolate`. You can choose any name you want, but it's a good idea to pick
      a name that makes sense in the context of the list you are iterating over.

      After the variable name, we have the `in` keyword, which tells Python that we want to iterate over the items
      in the list. Finally, we have the list itself, which is `chocolates` in this case.

  - type: "paragraph"
    card_group: "while"
    value: |
      # The 'while' Loop: The Condition Checker
      A `while` loop keeps running as 
      long as a certain condition is true. It's great for when you don't know how many times you want to 
      repeat an action or you want to create a clean exit condition.

  - type: "codeblock-exec"
    card_group: "while"
    description: "Using a `while` loop to repeat an action until a condition changes."
    language: "python"
    value: |
      count = 5
      while count > 0:
          print(f"Countdown: {count}")
          count -= 1

  - type: "paragraph"
    card_group: "break"
    value: |
      # Break and Continue: The Loop Controllers
      Sometimes in life, you need to take a break or skip something. In loops, `break` and `continue` 
      do just that. Use `break` to completely exit a loop, and `continue` to skip the current 
      iteration and go to the next one.

  - type: "codeblock-exec"
    card_group: "break"
    description: "Demonstrating the use of `break` and `continue` in a loop."
    language: "python"
    value: |
      for number in range(1, 10):
          if number == 5:
              continue
          if number == 8:
              break
          print(number)
  - type: "paragraph"
    card_group: "break"
    value: |
      In this example, we use the `range()` function to create a list of numbers from 1 to 10. 
      Then, we use a `for` loop to go through each number in the list. Inside the loop, we use 
      `if` statements to check if the number is 5 or 8. If it's 5, we use the `continue` keyword 
      to skip the current iteration and go to the next one. If it's 8, we use the `break` keyword 
      to exit the loop completely. Finally, we print out the number.

  - type: "kata"
    boilerplate: |
      numbers = [1, 2, 3, 4, 5]
      sum = 0
      # your code here
    task: "Use a `for` loop to calculate the sum of all numbers in the `numbers` list.\n"
    solution: |
      numbers = [1, 2, 3, 4, 5]
      sum = 0
      for number in numbers:
          sum += number
    test_code: |
      from main import numbers, sum
      import unittest
      class TestSumCalculation(unittest.TestCase):
          def test_sum_calculation(self):
              self.assertEqual(sum, 15, "Ensure that you add up all numbers correctly.")

  - type: "quiz"
    quiz_items:
      - question: "When should you use a `for` loop instead of a `while` loop?"
        answers:
          - value: "When you want to iterate over a collection of items"
            correct: true
            explanation: "A `for` loop is ideal for iterating over a collection of items, as it automatically handles the iteration process."
          - value: "When you need to repeat an action until a certain condition is met"
          - value: "When you are not sure how many times the loop should run"
      - question: "What does the `break` statement do in a loop?"
        answers:
          - value: "It pauses the loop temporarily"
          - value: "It stops the execution of the loop entirely"
            correct: true
            explanation: "The `break` statement is used to exit a loop prematurely, stopping its execution entirely."
          - value: "It skips the current iteration and continues with the next one"
