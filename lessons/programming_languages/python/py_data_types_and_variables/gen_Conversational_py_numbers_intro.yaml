name: Working with numbers in Python
node_ref: working_with_python_numbers
software_dependencies_ids:
    - py_3_11_x
content:
    - type: paragraph
      value: "# Let's Play with Numbers in Python! \U0001F3B2\n\nYou know, programming languages are all about solving problems, right? And sometimes, we need to do some math to solve those problems. Think about banking apps, scientific research, or even farming - they all need some number crunching!\n\nPython is super versatile and is used in all sorts of areas, from web development to data science. So, in this lesson, we're going to explore how to work with numbers in Python. \U0001F40D\n\nWe'll chat about variables and number data types, and I'll help you understand how to use them effectively. Plus, we'll talk about how humans and computers process numbers differently, and the limitations of natural and floating-point numbers in Python.\n\nAnd guess what? You'll also get to try your hand at a couple of practice tasks! You'll have a chance to play around and solve your first mini projects in Python. Let's get started! \U0001F680"
      description: |
        Introduction to lesson about numbers in Python.
        Topics of variables and number data types are covered.
        Difference between how humans process numbers and computers.
        Practice task with numbers.
    - type: paragraph
      value: "## Why Do We Use Numbers in Python, and How? \U0001F914\n\nNumbers are super important in our daily lives, and Python knows that! That's why it has built-in support for numbers and math operations, making it easy for us to play with data and do calculations. Let me show you a code block with some basic math operations, without using variables. I'll add comments to help you understand each step:\n\n```python\n# Addition\nprint(5 + 3)  # Output: 8\n\n# Subtraction\nprint(10 - 4)  # Output: 6\n\n# Multiplication\nprint(3 * 7)  # Output: 21\n\n# Division\nprint(20 / 4)  # Output: 5.0\n```\n\nSee? Python makes it super easy to do all sorts of math operations. And trust me, this will be super useful as you continue learning how to code! \U0001F9EE"
      description: |
        Second level title "How and why we use numbers in Python?"
        Programming languages help manipulate data and numbers as well.
        Python has built-in support for numbers and mathematical operations.
        Codeblock with comments on basic math operations without variables
    - type: paragraph
      value: "Alright, now that you've seen some examples of basic math operations in Python, why don't you give it a shot and run the code yourself? But before you do, let me quickly explain the `print` function we used in the code. The `print` function is like Python's way of talking to us - it takes one or more arguments and shows them as output. In our examples, we used the `print` function to show the results of the math operations. So go ahead, try it out, and see Python's magic in action! \U0001F3A9âœ¨"
      description: |
        Invitation to launch the following code.
        Small reference on print function and its arguments.
    - type: codeblock-exec
      value: |
        print("Addition of 1 + 1 is ", 1 + 1)
        print("Subtraction of 341 - 159 is ", 341 - 159)
        print("Multiplication of 39 * 83 is ", 39 * 83)
        print("Division of 100 / 5 is ", 100 / 5)
        print("Exponentiation of 2 ** 3 is ", 2 ** 3)
      description: |
        Basic math operations without variables
      language: python
    - type: paragraph
      value: "You know, in real life, we often use data in multiple places, and formulas can get pretty complicated. To make our code more efficient and easier to read, we use variables. Variables are like little containers that help us store and play with data, making it simpler to work with big formulas or reuse data throughout our code. Let me show you a code block with basic math operations using variables, and I'll add comments to help you understand each step:\n\n```python\n# Defining variables\na = 5\nb = 3\n\n# Addition\naddition_result = a + b\nprint(addition_result)  # Output: 8\n\n# Subtraction\nsubtraction_result = a - b\nprint(subtraction_result)  # Output: 2\n\n# Multiplication\nmultiplication_result = a * b\nprint(multiplication_result)  # Output: 15\n\n# Division\ndivision_result = a / b\nprint(division_result)  # Output: 1.6666666666666667\n```\n\nSee? Using variables makes our code more organized and easier to understand, especially when dealing with complex calculations or data that needs to be reused. \U0001F4E6"
      description: |
        Data used in different places and big formulas are not perfect that's why we use variables.
        Codeblock with comments on basic math operations with variables
    - type: paragraph
      value: "Even though humans and computers both deal with numbers, there are some key differences in how they handle them. One of these differences is the limitations of natural and floating-point numbers in Python, especially when it comes to range and precision. In Python, numbers come in different flavors, like integers (whole numbers) and floating-point numbers (numbers with decimal points).\n\nLet me show you a code block that demonstrates how numbers have different types, and I'll add comments to help you understand each step:\n\n```python\n# Integer (whole number)\ninteger_number = 42\nprint(type(integer_number))  # Output: <class 'int'>\n\n# Floating-point number (number with decimal points)\nfloating_point_number = 3.14\nprint(type(floating_point_number))  # Output: <class 'float'>\n\n# Limitations in range and precision\nlarge_integer = 10 ** 100\nprint(large_integer)  # Output: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\nimprecise_float = 0.1 + 0.2\nprint(imprecise_float)  # Output: 0.30000000000000004\n```\n\nAs you can see, Python can handle different types of numbers, but it's important to be aware of the limitations in range and precision when working with them. \U0001F9EE"
      description: |
        Difference between how humans process numbers and computers.
        Limitations of natural and floating point numbers in Python (range, precision).
        Different numbers have different types.
        codeblock that numbers have different types with comments
    - type: paragraph
      value: "In Python, when we give a value to a variable, we're doing something called \"assignment.\" During this process, Python automatically sets a type for the variable based on the value we give it. This is one of the reasons why Python is considered a dynamically typed language - the type of a variable can change while the program is running.\n\nFor example, if you give an integer value to a variable, Python will know it's an integer type. Similarly, if you give a floating-point value, Python will know it's a float type. This dynamic typing feature makes Python super flexible and easy to work with.\n\nWhy don't you try running the following code and see how Python automatically sets the type for variables based on the values you give them?\n\n```python\n# Assigning an integer value\nx = 10\nprint(type(x))  # Output: <class 'int'>\n\n# Assigning a floating-point value\nx = 3.14\nprint(type(x))  # Output: <class 'float'>\n```\n\nAs you can see, Python's dynamic typing lets you work with variables effortlessly, adapting to the values you assign as needed. \U0001F504"
      description: |
        Explain what assignment is.
        Assigning a variable sets a type for it.
        That's why Python is a dynamically typed language.
        Invitation to launch the following code.
    - type: codeblock-exec
      value: |
        a = 4
        b = 2.0
        c = 1.0 + 0.0j
        # Now variables a, b and c hold different types of numbers
        print("a is ", a)
        print("b is ", b)
        print("c is ", c)
        # And we can use variables as part of operations
        print("a + b is ", a + b)
        # Moreover we can assign result of operation to a previously defined variable
        a = a + b
        # Or we can assign the result of an operation to a new variable
        d = a + b
      description: |
        Setting variables, checking their types
      language: python
    - type: quiz
      quiz_items:
        - question: "In the previous code we changed variable `a` and then used it to calculate `d`. \nWhat value does `d` hold? Try to calculate it yourself or add `print(d)` to the end of the code and run it.\"\n"
          answers:
            - value: "6"
              explanation: a is 6 but d is 8
            - value: "8"
              correct: true
              explanation: |-
                a = 4 + 2.0 = 6
                 d = 6 + 2.0 = 8
            - value: "10"
            - value: "12"
        - question: What is true about working with numbers in Python?
          answers:
            - value: We must declare a type for each variable before using it
            - value: We can assign a new value to a variable of a different type
              correct: true
            - value: We can use variables of the same type in operations
              correct: true
            - value: We can use variables of different types in operations
    - type: paragraph
      value: "Alright, now that you've learned about numbers, variables, and dynamic typing in Python, let's put your knowledge to the test with a practice task! \U0001F3AF Your mission, should you choose to accept it, is to calculate the area of a circle with a radius of 5. We've already set up the variables `pi`, `area`, and `radius` for you. All you need to do is assign the result of the calculation to the variable `area`.\n\nHere's a quick rundown of the task:\n\n1. Calculate the area of a circle with a radius of 5. \U0001F7E2\n2. Use the provided variables `pi`, `area`, and `radius`. \U0001F4CF\n3. Assign the result of the calculation to the variable `area`. \U0001F4D0\n\nGo ahead and give it a shot! Let's see if you can successfully calculate the area of the circle using your shiny new Python skills! \U0001F31F"
      description: |
        Task description and invitation to solve it.
        Task is to calculate the area of a circle with radius 5.
        The variable Pi, area and radius are already defined.
        Assign the result of the calculation to the variable `area`.
    - type: kata
      boilerplate: |
        Pi = 3.141592653589793
        radius = 5
        area = # your code here
      task: "Calculate the area of a circle with a given radius. \nAssign the result of the calculation to the variable `area`.\n"
      test_code: |
        from main import area, Pi, radius
        import unittest
        class TestSquareSpace(unittest.TestCase):
            def test_square_space(self):
                self.assertEqual(area, Pi * radius ** 2,
                                "Make sure that you calculate the square space correctly.")
      solution: |
        Pi = 3.141592653589793
        radius = 5
        area = Pi * radius ** 2
