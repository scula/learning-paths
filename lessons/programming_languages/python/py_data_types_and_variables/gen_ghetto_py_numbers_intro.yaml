name: Working with numbers in Python
node_ref: working_with_python_numbers
software_dependencies_ids:
    - py_3_11_x
content:
    - type: paragraph
      value: "# Workin' wit' Numbers in Python\nYo, any programmin' language be out here to solve problems, ya know? Sometimes, we gotta do some math to get things done, like in bankin' apps, science stuff, farmin', and all that.\n\nPython ain't no different, it's used all over the place, from web development to data science. In this lesson, we gon' show you how to work wit' numbers in Python. We'll get into variables and number data types, helpin' you vibe with 'em and use 'em right. \n\nWe'll also talk 'bout how we humans deal with numbers compared to computers, and the limits of natural and floatin'-point numbers in Python. Plus, we got some practice tasks for ya to mess around with and solve your first mini projects in Python. Ya feel me?"
      description: |
        Introduction to lesson about numbers in Python.
        Topics of variables and number data types are covered.
        Difference between how humans process numbers and computers.
        Practice task with numbers.
    - type: paragraph
      value: |-
        ## How and Why We Use Numbers in Python?

        Numbers be mad important in our everyday life, and Python ain't no different. Python got built-in support for numbers and math stuff, lettin' us mess with data and do calculations real easy. Let's peep this code block showin' basic math operations without usin' variables, and we got comments to help you get what's goin' on:

        ```python
        # Addin' it up
        print(5 + 3)  # Output: 8

        # Takin' away
        print(10 - 4)  # Output: 6

        # Multiplyin'
        print(3 * 7)  # Output: 21

        # Dividin'
        print(20 / 4)  # Output: 5.0
        ```

        As you can see, Python makes it mad easy to do all kinds of math operations, which gonna be useful as you keep learnin' how to code. Ya dig?
      description: |
        Second level title "How and why we use numbers in Python?"
        Programming languages help manipulate data and numbers as well.
        Python has built-in support for numbers and mathematical operations.
        Codeblock with comments on basic math operations without variables
    - type: paragraph
      value: A'ight, now that you've peeped some examples of basic math stuff in Python, we want you to run the followin' code and see them results with your own eyes. But before you do that, let's talk real quick 'bout that `print` function we used in the code. The `print` function is built right into Python, and it takes one or more arguments and shows 'em as output. In our examples, we used the `print` function to show the results of them math operations. Go on, give it a shot, and see Python doin' its thing!
      description: |
        Invitation to launch the following code.
        Small reference on print function and its arguments.
    - type: codeblock-exec
      value: |
        print("Addition of 1 + 1 is ", 1 + 1)
        print("Subtraction of 341 - 159 is ", 341 - 159)
        print("Multiplication of 39 * 83 is ", 39 * 83)
        print("Division of 100 / 5 is ", 100 / 5)
        print("Exponentiation of 2 ** 3 is ", 2 ** 3)
      description: |
        Basic math operations without variables
      language: python
    - type: paragraph
      value: |-
        In real life, data be used all over the place, and them formulas can get mad complicated. To make our code more efficient and easier to read, we use variables. Variables let us store and mess with data, makin' it simpler to work with big formulas or reuse data all up in our code. Let's peep this code block showin' basic math operations usin' variables, and we got comments to help you get what's goin' on:

        ```python
        # Definin' variables
        a = 5
        b = 3

        # Addin' it up
        addition_result = a + b
        print(addition_result)  # Output: 8

        # Takin' away
        subtraction_result = a - b
        print(subtraction_result)  # Output: 2

        # Multiplyin'
        multiplication_result = a * b
        print(multiplication_result)  # Output: 15

        # Dividin'
        division_result = a / b
        print(division_result)  # Output: 1.6666666666666667
        ```

        As you can see, usin' variables makes our code more organized and easier to understand, especially when dealin' with complex calculations or data that needs to be reused. Ya feel me?
      description: |
        Data used in different places and big formulas are not perfect that's why we use variables.
        Codeblock with comments on basic math operations with variables
    - type: paragraph
      value: |-
        While humans and computers both deal with numbers, there be some key differences in how they handle 'em. One such difference be in the limitations of natural and floatin'-point numbers in Python, like in terms of range and precision. In Python, numbers be put into different types, like integers (whole numbers) and floatin'-point numbers (numbers with decimal points).

        Let's peep this code block showin' that numbers got different types, and we got comments to help you get what's goin' on:

        ```python
        # Integer (whole number)
        integer_number = 42
        print(type(integer_number))  # Output: <class 'int'>

        # Floatin'-point number (number with decimal points)
        floating_point_number = 3.14
        print(type(floating_point_number))  # Output: <class 'float'>

        # Limitations in range and precision
        large_integer = 10 ** 100
        print(large_integer)  # Output: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

        imprecise_float = 0.1 + 0.2
        print(imprecise_float)  # Output: 0.30000000000000004
        ```

        As shown, Python can handle different types of numbers, but it's mad important to know 'bout the limitations in range and precision when workin' with 'em. Ya dig?
      description: |
        Difference between how humans process numbers and computers.
        Limitations of natural and floating point numbers in Python (range, precision).
        Different numbers have different types.
        codeblock that numbers have different types with comments
    - type: paragraph
      value: |-
        In Python, when we give a value to a variable, we doin' somethin' called "assignment." While this goin' on, Python automatically sets a type for the variable based on the value we give it. This be one of the reasons why Python is considered a dynamically typed language, 'cause the type of a variable can change while the code runnin'.

        For example, if you give an integer value to a variable, Python gonna know it's an integer type. Same way, if you give a floatin'-point value, Python gonna know it's a float type. This dynamic typin' feature makes Python mad flexible and easy to work with.

        We want you to run the followin' code and peep how Python automatically sets the type for variables based on the values you give 'em:

        ```python
        # Givin' an integer value
        x = 10
        print(type(x))  # Output: <class 'int'>

        # Givin' a floatin'-point value
        x = 3.14
        print(type(x))  # Output: <class 'float'>
        ```

        As you can see, Python's dynamic typin' lets you work with variables real smooth, adaptin' to the values you give 'em as needed. Ya feel me?
      description: |
        Explain what assignment is.
        Assigning a variable sets a type for it.
        That's why Python is a dynamically typed language.
        Invitation to launch the following code.
    - type: codeblock-exec
      value: |
        a = 4
        b = 2.0
        c = 1.0 + 0.0j
        # Now variables a, b and c hold different types of numbers
        print("a is ", a)
        print("b is ", b)
        print("c is ", c)
        # And we can use variables as part of operations
        print("a + b is ", a + b)
        # Moreover we can assign result of operation to a previously defined variable
        a = a + b
        # Or we can assign the result of an operation to a new variable
        d = a + b
      description: |
        Setting variables, checking their types
      language: python
    - type: quiz
      quiz_items:
        - question: "In the previous code we changed variable `a` and then used it to calculate `d`. \nWhat value does `d` hold? Try to calculate it yourself or add `print(d)` to the end of the code and run it.\"\n"
          answers:
            - value: "6"
              explanation: a is 6 but d is 8
            - value: "8"
              correct: true
              explanation: |-
                a = 4 + 2.0 = 6
                 d = 6 + 2.0 = 8
            - value: "10"
            - value: "12"
        - question: What is true about working with numbers in Python?
          answers:
            - value: We must declare a type for each variable before using it
            - value: We can assign a new value to a variable of a different type
              correct: true
            - value: We can use variables of the same type in operations
              correct: true
            - value: We can use variables of different types in operations
    - type: paragraph
      value: |-
        A'ight, now that you've learned 'bout numbers, variables, and dynamic typin' in Python, it's time to put your skills to the test with a practice task. Your mission is to figure out the area of a circle with a radius of 5. We already set up the variables `pi`, `area`, and `radius` for you. All you gotta do is give the result of the calculation to the variable `area`.

        Here's a quick rundown of the task:

        1. Figure out the area of a circle with a radius of 5.
        2. Use the provided variables `pi`, `area`, and `radius`.
        3. Give the result of the calculation to the variable `area`.

        Go on, give it a shot, and see if you can get the area of the circle usin' your fresh Python skills!
      description: |
        Task description and invitation to solve it.
        Task is to calculate the area of a circle with radius 5.
        The variable Pi, area and radius are already defined.
        Assign the result of the calculation to the variable `area`.
    - type: kata
      boilerplate: |
        Pi = 3.141592653589793
        radius = 5
        area = # your code here
      task: "Calculate the area of a circle with a given radius. \nAssign the result of the calculation to the variable `area`.\n"
      test_code: |
        from main import area, Pi, radius
        import unittest
        class TestSquareSpace(unittest.TestCase):
            def test_square_space(self):
                self.assertEqual(area, Pi * radius ** 2,
                                "Make sure that you calculate the square space correctly.")
      solution: |
        Pi = 3.141592653589793
        radius = 5
        area = Pi * radius ** 2
