node_string_id: "os_command_line_shell"
name: "Terminal"
description: "Terminals are not only for ðŸ›«"
software_dependencies:
  - name: python
    version: 3.11.4
content:
  - type: "paragraph"
    card_group: "objectives"
    value: |
      # Learning Objectives
  - type: "paragraph"
    card_group: "objectives"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_folder_empty.png
    value: |
      In this lesson, we will learn more about a new (but actually oldschool ðŸŽ¸) way to interact with the computer
      through the terminal. After completing it you will be able to:

      1. **Running Python Scripts from the Terminal:** Our code doesn't live in a vacuum, it works 
      with other programs, files and operating system. We need to understand the environment in which our
      program is running. 

      2. **Navigating and Managing Files and Directories:** This is a fundamental skill for any programmer and
      again relates to the environment we are in. Our program and (and we) need to be aware of our surroundings 
      (files and directories).

      3. **Basic Knowledge of the Operating System:** We'll cover just the basics of the operating system (OS), like
      how programs and files interact with each other and how OS manages all of that.


      This lesson will be a bit theory-heavy but in the end you will have a chance to practice in the Codelab.

  - type: "paragraph"
    card_group: "what_is_terminal"
    value: |
      # What is a terminal?

      We are used to interacting with the computer through the Graphical User Interface or **GUI**. We simply 
      initiate programs by clicking on icons, seamlessly browse files and directories with a mere click,
      and effortlessly access data by using the appropriate application. For example, to view the contents 
      of the folder, we can open it with some built-in file manager (doesn't matter what OS you are using,
      you can definitely recognise what happens here)
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/gui_folder.png
    card_group: "what_is_terminal"
    value: |
      But there is another way to interact with the computer, and it involves using a terminal. 

      A terminal is a text-based interface used to interact with a computer's operating system and execute commands. 
      Unlike Graphical User Interfaces (GUIs), which rely on icons, windows, and mouse clicks, 
      terminals rely on text commands entered by the user. 

      In a terminal, you typically type commands in text form, and the computer responds
       with text-based output. It provides direct access to system functions, file manipulation, 
       software installation, and a wide range of other tasks by entering specific commands.

      Terminals are especially popular among programmers, system administrators, and power users 
      because they offer greater control and efficiency for certain tasks compared to GUIs. 
      They can be found on various operating systems, including Linux, macOS, and Windows.
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_folder_empty.png
    card_group: "what_is_terminal"
    value: |
      The terminal is a special program on your computer where you can type commands for 
      the computer to do certain tasks. It might look different if you're using a Windows computer, 
      a Mac, or another type of computer, but it works in a similar way on all of them. When 
      you open the terminal, you usually see two main things:

      * The **prompt**: This is a small symbol that shows you the terminal is ready for you to 
      type a command. Think of it like a computer's way of saying, "I'm ready to listen!" 
      In many cases, this symbol is a dollar sign $.
      * The **cursor**: This is usually a small blinking line or a rectangle. It shows where the 
      letters will appear when you start typing. It moves forward as you type, showing you 
      exactly where your next letter will go.

  - type: "paragraph"
    card_group: "rules"
    value: |
      # Two simple rules of working with the terminal

      **First**, in terminal you are *always in some directory*. Directory is the same thing as folder in the GUI.
      It's not like in the GUI where you can just open
      multiple windows and switch between them. In the terminal you are always in some directory and to change
      it you will need to use the command. 

      Remember the screenshot of the folder in the GUI above? This is how being in the same directory looks like
      in the terminal:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_folder_empty.png
    card_group: "rules"
    value: |
      Not much right? We are actually in the same directory as in the GUI, but we can't see the contents of the directory 
      or the name of the directory immediately. To see it we can use the **second rule** - we invoke programs by typing 
      their name and pressing **Enter**. 

      Let's look around and check in what directory we are in. We will use `pwd` command which stands for
      **print working directory**:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_folder_pwd.png
    card_group: "rules"
    value: |
      We can see a new text below our command, it's called the **output**. In our case, it's:
      ```
      /Users/nzavyalov/dev/temp/our_folder
      ```
      Which is the path to the current directory. Path represents the hierarchy of directories and files.
      Everything starts from the toop **/** directory, which is called the **root** directory. And then we
      have directories and files inside of it. And `our_folder` is actually nested several levels deep in 
      the hierarchy.

      You've already encountered paths in the GUI when working with files and folders. For example, 
      you maybe worked with the `Downloads` folder which is located in the `Home` directory. Or you used 
      different disks like `C:` or `D:` on Windows. Which would be the root directories of different disks.
      And folders inside them would be nested several levels deep in the hierarchy just like in our example.

  - type: "paragraph"
    card_group: "commands_programs"
    value: |
      # Commands and Programs 

      Now that we know the basics, let's check what's inside our directory. We can use the `ls` command which
      stands for **list**. It will list all the files and directories in the current directory:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_folder_ls.png
    card_group: "commands_programs"
    value: |
      Which is the same as in the GUI:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/gui_folder.png
    card_group: "commands_programs"
    value: |
      But what if we want to see the contents of the file? We can use the `cat`
      command which stands for **concatenate** but is usually used to print the contents of the file to the terminal:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_text_file_cat.png
    card_group: "commands_programs"
    value: |
      And we can see the contents of the file. But this time we didn't type only the name of the program, we also
      added the name of the file. And that's because `cat` is a program that accepts arguments. And the arguments
      are just additional information that we pass to the program. In our case, we passed the name of the file
      to the `cat` program. Spoiler: same will happen when we will try to launch our Python program.

  - type: "paragraph"
    card_group: "python_launch"
    value: |
      # Creating Python program through the terminal

      Now let's create a new file called `main.py` with a simple Python program.
      We will use `echo` command which just prints the text to the terminal. And we will use `>>` symbol to redirect
      the output of the `echo` command to the file which will be automatically created.
      ```
      $ echo "print('Hey')" >> main.py
      ```
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_echo.png
    card_group: "python_launch"
    value: |
      Let's check that a new file was created with GUI first:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/gui_mainpy.png
    card_group: "python_launch"
    value: |
      And we can also see the contents of the file with a simple text editor:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/gui_mainpy_content.png
    card_group: "python_launch"
    value: |
      Now let's use the previously learned commands to check that the file was created and to see its contents:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_echo_check.png
    card_group: "python_launch"
    value: |
      Now let's try to run our program. We will use the `python` command which is the Python interpreter. It will
      execute the Python code that we pass to it. And we will pass the name of our file to the `python` command:
  - type: "paragraph"
    hero_image: https://storage.googleapis.com/scula-public-assets/courses/python/command_line_shell/terminal_py_launch.png
    card_group: "python_launch"
    value: |
      And we can see that our program was executed and the output was printed to the terminal.

      This is how we can launch Python programs from the terminal. That's why it's important to understand how
      the terminal works and how to navigate through the directories. Because our program doesn't live in a vacuum,
      it works with other programs, files and operating system. And we need to understand the environment in which
      our program is running.

  - type: "paragraph"
    value: |
      # Summary and codelab

      That was a lot! Believe us we were also overwhelmed when we first saw the terminal. But don't worry,
      we will practice all of that in the Codelab. But before that, let's summarise what we've learned so far.

      * The terminal is a program that allows us to interact with the computer in a text-based way.
      * We can run programs by typing their name and pressing **Enter**.
      * We can pass arguments to the programs.
      * We can do everything we can do in the GUI but without touching the mouse.
      * We can launch Python programs from the terminal using the `python` command.

  - type: "paragraph"
    card_group: "codelab_fun"
    value: |
      ## Practice in the Lab
      Now let's practice in the lab. Click on the button below to create a new lab session.
  - type: "codelab"
    card_group: "codelab_fun"
    gcs_url: gs://scula-codelabs/codelabs_intro_python_commandline-af75b6c.tar.gz
    codelab_image: europe-docker.pkg.dev/amazemind/amazemind-services/codelab-intro-python:0.20
    codelab_guard_image: europe-docker.pkg.dev/amazemind/amazemind-services/codelab-guard-intro-python:0.14

  - type: "hint"
    value: |
      Bonus: Terminal is actually just a program that allows us to interact with the shell which is another 
      program ðŸª† that does the actual communication with the operating system. There are many different shells,
      but we will use **bash** because it's one of the most popular shells and the default shell on most Linux
      distributions, Mac OS and can be installed on Windows too.
